fn_main {
  fn_set_rand_seed(4000)
  fn_init_game()
  fn_reprint_board()
}

fn_set_rand_seed {
  push(a,b,i)
  i = sp + 4
  a = mem[i]
  b = 16
  mem[b] = a
  pop(i,b,a)
}

fn_rand {
  push(a,b,c)

  c = 16
  a = mem[c]
  b = a << 13
  a = a ^ b
  b = a >> 17
  a = a ^ b
  b = a << 5
  a = a ^ b
  mem[c] = a

  rv = a
  pop(c,b,a)
}

fn_init_game {
  push(a,b,i)
  for (i=0; i<16; i=i+1) {
    mem[i] = zero
  }
  fn_add_new()
  pop(i,b,a)
}

fn_trap_handler {
  push(a,i)
  i = sp + 3
  a = mem[i]
  fn_update_board(a)
  fn_reprint_board()
  pop(i,a)
}

fn_update_board {
  push(a,b,i)
  i = sp + 4
  a = mem[i]
  b = 0

  if (a == 107) {
    b = fn_move_up()
  }
  if (a == 106) {
    b = fn_move_down()
  }
  if (a == 104) {
    b = fn_move_left()
  }
  if (a == 108) {
    b = fn_move_right()
  }

  if (b != 0) {
    fn_add_new()
  }
  pop(i,b,a)
}

fn_add_new {
  push(a,b,c,d,e,f)
  f = 1
  a = fn_rand()
  for (b=0; b<16; b=b+1) {
    c = a + b
    d = 15
    d = c & d
    e = mem[d]
    if (e == 0) {
      mem[d] = f
      f = 0
    }
  }
  pop(f,e,d,c,b,a)
}

fn_compress {
  push(a,b,c,d,e,f,h,i)
  i = 0

  for (a=0; a<4; a=a+1) {
    b = a << 2
    h = 0
    for (c=0; c<4; c=c+1) {
      d = b + c
      e = mem[d]
      if (e != 0) {
        f = b + h
        mem[f] = e
        if (h != c) {
          mem[d] = zero
          i = 1
        }
        h = h + 1
      }
    }
  }

  rv = i
  pop(i,h,f,e,d,c,b,a)
}

fn_merge {
  push(a,b,c,d,e,f,g,i)
  i = 0

  for (a=0; a<4; a=a+1) {
    b = a << 2
    for (c=0; c<3; c=c+1) {
      d = b + c
      e = mem[d]
      if (e != 0) {
        f = d + 1
        g = mem[f]
        if (e == g) {
          e = e + 1
          mem[d] = e
          mem[f] = zero
          i = 1
        }
      }
    }
  }

  rv = i
  pop(i,g,f,e,d,c,b,a)
}

fn_reverse {
  push(a,b,c,d,e,f,g)
  for (a=0; a<4; a=a+1) {
    b = a << 2
    for (c=0; c<2; c=c+1) {
      d = b + c
      e = mem[d]
      f = b - c
      f = f + 3
      g = mem[f]
      mem[d] = g
      mem[f] = e
    }
  }
  pop(g,f,e,d,c,b,a)
}

fn_transpose {
  push(a,b,c,d,e,f,g)
  for (a=0; a<4; a=a+1) {
    b = a << 2
    for (c=0; c<4; c=c+1) {
      if (a < c) {
        d = b + c
        e = mem[d]
        f = c << 2
        f = f + a
        g = mem[f]
        mem[d] = g
        mem[f] = e
      }
    }
  }
  pop(g,f,e,d,c,b,a)
}

fn_move_left {
  push(a,b,c)
  a = fn_compress()
  b = fn_merge()
  c = fn_compress()
  a = a | b
  a = a | c
  rv = a
  pop(c,b,a)
}

fn_move_right {
  push(a)
  fn_reverse()
  a = fn_move_left()
  fn_reverse()
  rv = a
  pop(a)
}

fn_move_up {
  push(a)
  fn_transpose()
  a = fn_move_left()
  fn_transpose()
  rv = a
  pop(a)
}

fn_move_down {
  push(a)
  fn_transpose()
  a = fn_move_right()
  fn_transpose()
  rv = a
  pop(a)
}

fn_reprint_board {
  push(b,c,d,e,i)
  for(i=0; i<9; i=i+1) {
    fn_print(27,91,49,70,0)  // ESC [ 1 F (cursor up)
    fn_print(27,91,75,0)     // ESC [ 1 K (erase line)
  }

  fn_print_line()
  
  for (i=0; i<4; i=i+1) {
    fn_putchar(124)

    b = i << 2
    for (c=0; c<4; c=c+1) {
      d = b + c
      e = mem[d]
      fn_print_single_block(e)
      fn_putchar(124)
    }
    fn_putchar(10)
    fn_print_line()
  }
  pop(i,e,d,c,b)
}

fn_print_single_block {
  push(a,b,c,d,i)
  i = sp + 6
  a = mem[i]
  b = 32 // space
  c = 48 // background, ASCII:0
  d = 55 // foreground, ASCII:7

  if (a >= 1) {
    b = a + 48
    c = b
  }
  if (a >= 7) {
    c = 7
    d = a + 42
  }
  if (a >= 13) {
    d = 55
  }

  fn_print(27,91,52,c,109,0) // ESC [ 4 c m NULL
  fn_print(27,91,51,d,109,0) // ESC [ 3 d m NULL
  fn_print(32,b,0)
  fn_print(27,91,48,109,0) // ESC [ 0 m NULL

  pop(i,d,c,b,a)
}

fn_print_line {
  push(i)
  for (i=0; i<13; i=i+1) {
    fn_putchar(45) // -
  }
  fn_putchar(10) // LF
  pop(i)
}
